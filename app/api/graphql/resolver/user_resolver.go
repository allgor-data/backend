package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"fmt"

	"github.com/allgor-data/backend/app/api/graphql/generated"
	"github.com/allgor-data/backend/app/usecase"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput) (*generated.User, error) {
	output, err := r.CreateUserUsecase.Execute(&usecase.CreateUserInputDTO{
		Email:     input.Email,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Password:  input.Password,
	})

	if err != nil {
		return nil, err
	}

	return &generated.User{
		UID:       output.UID,
		Email:     output.Email,
		FirstName: output.FirstName,
		LastName:  output.LastName,
		Role:      output.Role,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*generated.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
